// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThreadedMosaic.Core.Data;

#nullable disable

namespace ThreadedMosaic.Core.Migrations
{
    [DbContext(typeof(ThreadedMosaicDbContext))]
    [Migration("20250828203920_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.ImageMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte>("AverageBlue")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageBrightness")
                        .HasColumnType("REAL");

                    b.Property<byte>("AverageGreen")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageHue")
                        .HasColumnType("REAL");

                    b.Property<byte>("AverageRed")
                        .HasColumnType("INTEGER");

                    b.Property<double>("AverageSaturation")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileHash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Format")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastAccessedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileHash")
                        .HasDatabaseName("IX_ImageMetadata_FileHash");

                    b.HasIndex("FilePath")
                        .HasDatabaseName("IX_ImageMetadata_FilePath");

                    b.HasIndex("LastAccessedAt")
                        .HasDatabaseName("IX_ImageMetadata_LastAccessedAt");

                    b.ToTable("ImageMetadata");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.MosaicProcessingResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<double?>("AverageColorDistance")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan?>("AverageProcessingTimePerTile")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("AvoidImageRepetition")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BrightnessWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ColorTolerance")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<double?>("HueTolerance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("MasterImageId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MaxImageReuse")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MosaicType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MostUsedTileCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MostUsedTilePath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputFormat")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputPath")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("PixelSize")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("ProcessingTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Quality")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SaturationWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeedImagesUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SimilarityThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TilesProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TotalTiles")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UniqueTilesUsed")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("UseEdgeDetection")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_MosaicResult_CreatedAt");

                    b.HasIndex("MasterImageId")
                        .HasDatabaseName("IX_MosaicResult_MasterImageId");

                    b.HasIndex("MosaicType")
                        .HasDatabaseName("IX_MosaicResult_MosaicType");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_MosaicResult_Status");

                    b.ToTable("MosaicResults");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.MosaicSeedImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<double?>("AverageColorDistance")
                        .HasColumnType("REAL");

                    b.Property<Guid>("MosaicResultId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SeedImageId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeedImageId");

                    b.HasIndex("MosaicResultId", "SeedImageId")
                        .IsUnique()
                        .HasDatabaseName("IX_MosaicSeedImage_MosaicResult_SeedImage");

                    b.ToTable("MosaicSeedImages");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.ProcessingStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdditionalData")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ItemsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MemoryUsedBytes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MosaicResultId")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ProgressPercentage")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TotalItems")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MosaicResultId")
                        .HasDatabaseName("IX_ProcessingStep_MosaicResultId");

                    b.HasIndex("StartedAt")
                        .HasDatabaseName("IX_ProcessingStep_StartedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProcessingStep_Status");

                    b.ToTable("ProcessingSteps");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.MosaicProcessingResult", b =>
                {
                    b.HasOne("ThreadedMosaic.Core.Data.Models.ImageMetadata", "MasterImage")
                        .WithMany("MosaicsAsMaster")
                        .HasForeignKey("MasterImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MasterImage");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.MosaicSeedImage", b =>
                {
                    b.HasOne("ThreadedMosaic.Core.Data.Models.MosaicProcessingResult", "MosaicResult")
                        .WithMany("SeedImages")
                        .HasForeignKey("MosaicResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThreadedMosaic.Core.Data.Models.ImageMetadata", "SeedImage")
                        .WithMany("MosaicsAsSeed")
                        .HasForeignKey("SeedImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MosaicResult");

                    b.Navigation("SeedImage");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.ProcessingStep", b =>
                {
                    b.HasOne("ThreadedMosaic.Core.Data.Models.MosaicProcessingResult", "MosaicResult")
                        .WithMany("ProcessingSteps")
                        .HasForeignKey("MosaicResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MosaicResult");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.ImageMetadata", b =>
                {
                    b.Navigation("MosaicsAsMaster");

                    b.Navigation("MosaicsAsSeed");
                });

            modelBuilder.Entity("ThreadedMosaic.Core.Data.Models.MosaicProcessingResult", b =>
                {
                    b.Navigation("ProcessingSteps");

                    b.Navigation("SeedImages");
                });
#pragma warning restore 612, 618
        }
    }
}
