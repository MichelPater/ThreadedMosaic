@using ThreadedMosaic.Core.Models
@using ThreadedMosaic.BlazorServer.Services
@inject MosaicApiService ApiService
@inject IJSRuntime JSRuntime

<div class="card mb-4">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-layer-group me-2"></i>
            Batch Processing
        </h5>
    </div>
    <div class="card-body">
        @if (!IsBatchMode)
        {
            <div class="text-center py-4">
                <p class="text-muted mb-3">Process multiple images with the same settings</p>
                <button class="btn btn-primary" @onclick="EnableBatchMode">
                    <i class="fas fa-plus me-2"></i>
                    Enable Batch Processing
                </button>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-md-6">
                    <h6>Master Images</h6>
                    <div class="mb-3">
                        <InputFile OnChange="OnMasterImagesSelected" multiple accept="image/*" class="form-control" />
                        <div class="form-text">Select multiple master images to process</div>
                    </div>
                    
                    @if (SelectedMasterImages.Any())
                    {
                        <div class="selected-files mb-3">
                            <small class="text-muted">Selected: @SelectedMasterImages.Count images</small>
                            <div class="mt-2">
                                @foreach (var image in SelectedMasterImages.Take(3))
                                {
                                    <span class="badge bg-secondary me-1">@image.Name</span>
                                }
                                @if (SelectedMasterImages.Count > 3)
                                {
                                    <span class="badge bg-light text-dark">+@(SelectedMasterImages.Count - 3) more</span>
                                }
                            </div>
                        </div>
                    }
                </div>
                
                <div class="col-md-6">
                    <h6>Processing Settings</h6>
                    <div class="mb-3">
                        <label class="form-label">Pixel Size</label>
                        <select class="form-select" @bind="PixelSize">
                            <option value="8">8x8 (High Detail)</option>
                            <option value="16" selected>16x16 (Standard)</option>
                            <option value="32">32x32 (Fast)</option>
                            <option value="64">64x64 (Very Fast)</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Output Format</label>
                        <select class="form-select" @bind="OutputFormat">
                            <option value="jpeg">JPEG</option>
                            <option value="png">PNG</option>
                            <option value="webp">WebP</option>
                        </select>
                    </div>
                </div>
            </div>
            
            @if (SelectedMasterImages.Any())
            {
                <div class="batch-summary mt-4 p-3 bg-light rounded">
                    <h6>Batch Summary</h6>
                    <div class="row">
                        <div class="col-md-3">
                            <strong>Images:</strong> @SelectedMasterImages.Count
                        </div>
                        <div class="col-md-3">
                            <strong>Pixel Size:</strong> @PixelSize x @PixelSize
                        </div>
                        <div class="col-md-3">
                            <strong>Estimated Time:</strong> @EstimatedTotalTime.ToString(@"mm\:ss")
                        </div>
                        <div class="col-md-3">
                            <strong>Format:</strong> @OutputFormat.ToUpper()
                        </div>
                    </div>
                </div>
                
                <div class="mt-3 d-flex gap-2">
                    <button class="btn btn-success" @onclick="StartBatchProcessing" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                            <text>Processing...</text>
                        }
                        else
                        {
                            <i class="fas fa-play me-2"></i>
                            <text>Start Batch Processing</text>
                        }
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="DisableBatchMode" disabled="@IsProcessing">
                        Cancel
                    </button>
                </div>
            }
            
            @if (BatchResults.Any())
            {
                <div class="batch-results mt-4">
                    <h6>Batch Results</h6>
                    <div class="row">
                        @foreach (var result in BatchResults)
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card">
                                    <div class="card-body p-2">
                                        <h6 class="card-title small">@result.ImageName</h6>
                                        @if (result.IsCompleted)
                                        {
                                            @if (result.IsSuccess)
                                            {
                                                <div class="text-success small">
                                                    <i class="fas fa-check-circle me-1"></i>
                                                    Completed (@result.ProcessingTime.ToString(@"mm\:ss"))
                                                </div>
                                                <button class="btn btn-sm btn-outline-primary mt-1" @onclick="() => DownloadResult(result.ResultPath!)">
                                                    <i class="fas fa-download"></i> Download
                                                </button>
                                            }
                                            else
                                            {
                                                <div class="text-danger small">
                                                    <i class="fas fa-exclamation-circle me-1"></i>
                                                    Failed: @result.ErrorMessage
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="progress" style="height: 6px;">
                                                <div class="progress-bar" role="progressbar" style="width: @(result.Progress)%"></div>
                                            </div>
                                            <div class="small text-muted mt-1">@result.Progress% complete</div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string? SeedFolder { get; set; }
    [Parameter] public MosaicType MosaicType { get; set; } = MosaicType.Color;
    [Parameter] public EventCallback<bool> OnBatchModeChanged { get; set; }

    private bool IsBatchMode = false;
    private bool IsProcessing = false;
    private List<IBrowserFile> SelectedMasterImages = new();
    private int PixelSize = 16;
    private string OutputFormat = "jpeg";
    private List<BatchProcessingResult> BatchResults = new();
    private TimeSpan EstimatedTotalTime = TimeSpan.Zero;

    private async Task EnableBatchMode()
    {
        IsBatchMode = true;
        await OnBatchModeChanged.InvokeAsync(true);
    }

    private async Task DisableBatchMode()
    {
        IsBatchMode = false;
        SelectedMasterImages.Clear();
        BatchResults.Clear();
        IsProcessing = false;
        await OnBatchModeChanged.InvokeAsync(false);
    }

    private async Task OnMasterImagesSelected(InputFileChangeEventArgs e)
    {
        SelectedMasterImages = e.GetMultipleFiles(20).ToList(); // Limit to 20 files
        UpdateEstimatedTime();
        StateHasChanged();
    }

    private void UpdateEstimatedTime()
    {
        if (SelectedMasterImages.Any())
        {
            // Simple estimation based on pixel size and image count
            var baseTimePerImage = PixelSize switch
            {
                8 => 30,  // High detail takes longer
                16 => 15, // Standard
                32 => 8,  // Fast
                64 => 4,  // Very fast
                _ => 15
            };
            EstimatedTotalTime = TimeSpan.FromSeconds(baseTimePerImage * SelectedMasterImages.Count);
        }
        else
        {
            EstimatedTotalTime = TimeSpan.Zero;
        }
    }

    private async Task StartBatchProcessing()
    {
        if (!SelectedMasterImages.Any() || string.IsNullOrEmpty(SeedFolder))
            return;

        IsProcessing = true;
        BatchResults.Clear();
        
        // Initialize results
        foreach (var image in SelectedMasterImages)
        {
            BatchResults.Add(new BatchProcessingResult
            {
                ImageName = image.Name,
                IsCompleted = false,
                Progress = 0
            });
        }

        StateHasChanged();

        try
        {
            
            // Process images one by one (could be parallelized)
            for (int i = 0; i < SelectedMasterImages.Count; i++)
            {
                var image = SelectedMasterImages[i];
                var result = BatchResults[i];
                
                try
                {
                    var startTime = DateTime.Now;
                    
                    // Simulate progress updates
                    for (int progress = 0; progress <= 100; progress += 20)
                    {
                        result.Progress = progress;
                        StateHasChanged();
                        await Task.Delay(200); // Simulate processing time
                    }
                    
                    // Here you would call the actual API
                    // For now, simulate completion
                    await Task.Delay(1000);
                    
                    result.IsCompleted = true;
                    result.IsSuccess = true;
                    result.ProcessingTime = DateTime.Now - startTime;
                    result.ResultPath = $"batch_result_{i}_{image.Name}";
                }
                catch (Exception ex)
                {
                    result.IsCompleted = true;
                    result.IsSuccess = false;
                    result.ErrorMessage = ex.Message;
                }
                
                StateHasChanged();
            }
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task DownloadResult(string resultPath)
    {
        // Implement download logic
        await JSRuntime.InvokeVoidAsync("console.log", $"Downloading: {resultPath}");
    }

    private class BatchProcessingResult
    {
        public string ImageName { get; set; } = "";
        public bool IsCompleted { get; set; }
        public bool IsSuccess { get; set; }
        public int Progress { get; set; }
        public string? ErrorMessage { get; set; }
        public string? ResultPath { get; set; }
        public TimeSpan ProcessingTime { get; set; }
    }
}