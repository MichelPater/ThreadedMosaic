@using Microsoft.AspNetCore.Components.Forms

<div class="mb-3">
    <label class="form-label">@Label</label>
    <InputFile class="form-control" OnChange="@OnFileSelected" accept="@Accept" />
    @if (SelectedFile != null)
    {
        <div class="form-text text-success">
            <i class="bi bi-check-circle"></i> @SelectedFile.Name (@FormatFileSize(SelectedFile.Size))
        </div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="form-text text-danger">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Select File";
    [Parameter] public string Accept { get; set; } = "*/*";
    [Parameter] public IBrowserFile? SelectedFile { get; set; }
    [Parameter] public EventCallback<IBrowserFile?> SelectedFileChanged { get; set; }
    [Parameter] public string? SelectedPath { get; set; }
    [Parameter] public EventCallback<string?> SelectedPathChanged { get; set; }

    private string? errorMessage;
    private readonly long maxFileSize = 50 * 1024 * 1024; // 50MB

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        
        var file = e.File;
        if (file != null)
        {
            // Validate file size
            if (file.Size > maxFileSize)
            {
                errorMessage = $"File size ({FormatFileSize(file.Size)}) exceeds maximum allowed size (50MB)";
                await SelectedFileChanged.InvokeAsync(null);
                await SelectedPathChanged.InvokeAsync(null);
                return;
            }

            // Validate file type for images
            if (Accept.Contains("image") && !IsImageFile(file.ContentType))
            {
                errorMessage = "Please select a valid image file (JPEG, PNG, BMP, TIFF, WebP)";
                await SelectedFileChanged.InvokeAsync(null);
                await SelectedPathChanged.InvokeAsync(null);
                return;
            }

            await SelectedFileChanged.InvokeAsync(file);
            await SelectedPathChanged.InvokeAsync(file.Name);
        }
        else
        {
            await SelectedFileChanged.InvokeAsync(null);
            await SelectedPathChanged.InvokeAsync(null);
        }
    }

    private bool IsImageFile(string contentType)
    {
        var imageTypes = new[] { "image/jpeg", "image/jpg", "image/png", "image/bmp", "image/tiff", "image/webp", "image/gif" };
        return imageTypes.Contains(contentType?.ToLowerInvariant());
    }

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB" };
        double size = bytes;
        int suffixIndex = 0;
        
        while (size >= 1024 && suffixIndex < suffixes.Length - 1)
        {
            size /= 1024;
            suffixIndex++;
        }
        
        return $"{size:N2} {suffixes[suffixIndex]}";
    }
}