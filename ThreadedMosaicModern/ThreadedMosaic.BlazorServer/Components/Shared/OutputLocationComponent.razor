@using Microsoft.AspNetCore.Components.Forms

<div class="mb-3">
    <label class="form-label">Output Location</label>
    
    <div class="input-group">
        <InputFile class="form-control" 
                   @ref="locationInput" 
                   OnChange="OnLocationSelected" 
                   webkitdirectory 
                   directory />
        @if (!string.IsNullOrEmpty(OutputPath))
        {
            <button class="btn btn-outline-danger" type="button" @onclick="ClearSelection">
                <i class="bi bi-x"></i> Clear
            </button>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(OutputPath))
    {
        <div class="form-text text-success">
            <i class="bi bi-check-circle"></i> @Path.GetFileName(OutputPath)
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="form-text text-danger">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
        </div>
    }
    
    <div class="form-text">
        Select a directory where your mosaic will be saved. Supported formats: JPEG, PNG, BMP, WebP.
    </div>
</div>

@code {
    [Parameter] public string? OutputPath { get; set; }
    [Parameter] public EventCallback<string?> OutputPathChanged { get; set; }

    private InputFile locationInput = null!;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        // Set default output path if none provided
        if (string.IsNullOrEmpty(OutputPath))
        {
            var desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            OutputPath = desktopPath;
        }
    }

    private async Task OnLocationSelected(InputFileChangeEventArgs e)
    {
        try
        {
            errorMessage = null;
            var files = e.GetMultipleFiles(1); // Only need one file to determine directory
            
            if (files.Count > 0)
            {
                var firstFile = files.First();
                var directoryName = "Selected Directory";
                
                // Try to extract directory name from file path
                if (!string.IsNullOrEmpty(firstFile.Name))
                {
                    var pathSegments = firstFile.Name.Replace('\\', '/').Split('/');
                    if (pathSegments.Length > 1)
                    {
                        directoryName = pathSegments[0];
                    }
                }
                
                // For output location, we want the directory path, not individual files
                // Since this is a directory picker, we'll use the directory name
                OutputPath = directoryName;
                await OutputPathChanged.InvokeAsync(directoryName);
                
                StateHasChanged();
            }
            else
            {
                errorMessage = "No directory selected";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error selecting output location: {ex.Message}";
        }
    }

    private async Task ClearSelection()
    {
        OutputPath = null;
        errorMessage = null;
        await OutputPathChanged.InvokeAsync(null);
        
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Handle external parameter changes
        await base.OnParametersSetAsync();
    }
}